rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	//=========================
    // Functions
    
  	function isSignedIn() {
      return request.auth != null;
    }
    
    function getRoles() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
    	// Enforces sign in and role
      return isSignedIn() && getRoles()[role] == true;
    }
  
  	//=========================
    // Rule matching
    
  	match /temperatures/{temperature} {
    	// Admin can perform ALL operations
      // Users can get their own temperature records but not others
      // Any user can create their own record
      // Only the user themselves or the admin can update their own records
      allow get: if resource.data.author == request.auth.uid || hasRole('admin');
      allow list: if hasRole('admin');
      allow create: if isSignedIn();
      allow update: if resource.data.author == request.auth.uid || hasRole('admin');
      allow delete: if resource.data.author == request.auth.uid || hasRole('admin');
    }
    
    match /roles/{user} {
    	// Allow users to create and read their own roles, but only
    	// update it if they have the admin role
      allow get: if request.auth.uid == user || hasRole('admin');
      allow list: if hasRole('admin');
      allow update: if hasRole('admin');
      allow create: if !request.resource.data.keys().hasAny(['admin']) && request.auth.uid == user || hasRole('admin');
    	allow delete: if hasRole('admin');
    }
    
    match /configuration/{config} {
    	// The configuration table can only be accessed by admins
    	allow read, write: if hasRole('admin');
    }
  	
    match /{document=**} {
      allow read, write: if false;
    }
  }
}